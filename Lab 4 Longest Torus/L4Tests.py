from main import longest_path


# Return Empty trail
assert(longest_path(None) == [])

assert(longest_path([]) == [])

assert(longest_path([[], [], []]) == [])

assert(longest_path([1]) == [])

assert(longest_path([[1]]) == [])

assert(longest_path([1, 2, 3]) == [])

assert(longest_path([[1, 1, 1], 
                     [1, 1, 1], 
                     [1, 1, 1],]) == [])


# Simple Return
assert(longest_path([[1], [2]]) == [(0, 0), (1, 0)] or [(1, 0), (0, 0)])

assert(longest_path([[1, 2]]) == [(0, 0), (0, 1)] or [(0, 1), (0, 0)])


# Spiral Path
assert(longest_path([[1, 2, 3], 
                     [8, 9, 4], 
                     [7, 6, 5]]) == [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 1), (2, 0), (1, 0), (1, 1)])

assert(longest_path([[9, 2, 3], 
                     [8, 1, 4], 
                     [7, 6, 5]]) == [(1, 1), (0, 1), (0, 2), (1, 2), (2, 2), (2, 1), (2, 0), (1, 0), (0, 0)])


# Crossing Horizontal Border
assert(longest_path([[1, 2, 3], 
                     [7, 6, 5], 
                     [8, 9, 4],]) == [(0, 0), (0, 1), (0, 2), (2, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1)])

assert(longest_path([[1, 4, 5], 
                     [9, 8, 7], 
                     [2, 3, 6],]) == [(0, 0), (2, 0), (2, 1), (0, 1), (0, 2), (2, 2), (1, 2), (1, 1), (1, 0)])


# Crossing Vertical Border
assert(longest_path([[1, 7, 8], 
                     [2, 6, 9], 
                     [3, 5, 4],]) == [(0, 0), (1, 0), (2, 0), (2, 2), (2, 1), (1, 1), (0, 1), (0, 2), (1, 2)])

assert(longest_path([[1, 9, 2], 
                     [4, 8, 3], 
                     [5, 7, 6],]) == [(0, 0), (0, 2), (1, 2), (1, 0), (2, 0), (2, 2), (2, 1), (1, 1), (0, 1)])

# Crossing Multiple Border
assert(longest_path([[1, 9, 2], 
                     [7, 6, 8], 
                     [4, 5, 3],]) == [(0, 0), (0, 2), (2, 2), (2, 0), (2, 1), (1, 1), (1, 0), (1, 2)])

assert(longest_path([[1, 6, 2], 
                     [4, 5, 3],]) == [(0, 0), (0, 2), (1, 2), (1, 0), (1, 1), (0, 1)])

# Snake Patterns
assert(longest_path([[1, 6, 7], 
                     [2, 5, 8], 
                     [3, 4, 9],]) == [(0, 0), (1, 0), (2, 0), (2, 1), (1, 1), (0, 1), (0, 2), (1, 2), (2, 2)])

assert(longest_path([[9, 4, 3], 
                     [8, 5, 2], 
                     [7, 6, 1],]) == [(2, 2), (1, 2), (0, 2), (0, 1), (1, 1), (2, 1), (2, 0), (1, 0), (0, 0)])

assert(longest_path([[1, 2, 3], 
                     [6, 5, 4], 
                     [7, 8, 9],]) == [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)])

assert(longest_path([[9, 8, 7], 
                     [4, 5, 6], 
                     [3, 2, 1],]) == [(2, 2), (2, 1), (2, 0), (1, 0), (1, 1), (1, 2), (0, 2), (0, 1), (0, 0)])

# multiple occurences of a value
assert(longest_path([[3, 4, 3], 
                     [6, 5, 2], 
                     [3, 2, 1],]) == [(2, 2), (1, 2), (0, 2), (0, 1), (1, 1), (1, 0)])

assert(longest_path([[2, 1, 2], 
                     [6, 5, 4], 
                     [3, 4, 3],]) == [(0, 1), (0, 2), (2, 2), (1, 2), (1, 1), (1, 0)] or 
                                     [(0, 1), (2, 1), (2, 2), (1, 2), (1, 1), (1, 0)])

# non-minimum starting location
assert(longest_path([[7, 3, 4], 
                     [6, 2, 5], 
                     [1, 3, 3],]) == [(1, 1), (0, 1), (0, 2), (1, 2), (1, 0), (0, 0)])

assert(longest_path([[1, 6, 5], 
                     [8, 2, 3], 
                     [1, 7, 4],]) == [(1, 1), (1, 2), (2, 2), (0, 2), (0, 1), (2, 1)])


# Negative Values
assert(longest_path([[1, -6, 5], 
                     [8, 2, 3], 
                     [1, 7, 4],]) == [(0, 1), (1, 1), (1, 2), (2, 2), (0, 2)] or 
                                     [(0, 1), (1, 1), (1, 2), (2, 2), (2, 1)])

assert(longest_path([[1, -6, -5], 
                     [8, -2, -3], 
                     [1, -7, -4],]) == [(2, 1), (0, 1), (0, 2), (2, 2), (1, 2), (1, 1), (1, 0)])

assert(longest_path([[-1, -7, -8], 
                     [-2, -6, -9], 
                     [-3, -5, -4],]) == [(1, 2), (0, 2), (0, 1), (1, 1), (2, 1), (2, 2), (2, 0), (1, 0), (0, 0)])


# m != n
assert(longest_path([[3, 9, 8, 5],
                    [26, 17, 42, 1]]) == [(0, 0), (0, 3), (0, 2), (0, 1), (1, 1), (1, 2)] or
                                         [(1, 3), (0, 3), (0, 2), (0, 1), (1, 1), (1, 2)])

assert(longest_path([[6, 5], 
                     [2, 3], 
                     [7, 4],]) == [(1, 0), (1, 1), (2, 1), (0, 1), (0, 0), (2, 0)])
